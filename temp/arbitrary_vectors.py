# -*- coding: utf-8 -*-
"""arbitrary_vectors.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1El6FLmdktQuUdJG0Hztb92T58Iddsx_B
"""

import numpy as np
import matplotlib.pyplot as plt
from sympy import Matrix, sqrt
import math
from math import pi

N = 1000 #number of sample points per random variable(component of the random vector)
K = 3 #number of random variables per random process(number of components)

def generate_positive_definite_matrix(k):
    # Generate a random lower triangular matrix
    L = np.tril(np.random.rand(k, k))

    # Construct the positive definite matrix by multiplying L with its transpose
    A = np.dot(L, L.T)

    return A

Y = np.random.randn(K, N) #generates a random matrix with K rows and N columns
A = np.random.randn(K) #This is supposed to be the mean array of the required vectors, replaced by a random array
A_matrix = np.tile(A[:, np.newaxis], (1, N))
Cxx = generate_positive_definite_matrix(K) #supposed to be autocovariance matrix of the required matrix X, replaced by a random matrix

cov_mat = Matrix(Cxx)
P, D = cov_mat.diagonalize()
P = np.mat(P).astype('float')
D = np.mat(D).astype('float')
Drt = np.sqrt(D)

B = P @ Drt
X = A_matrix + B@Y

x0 = np.array(X[0])
x1 = np.array(X[1])
plt.scatter(x0, x1, s = 1)
#plt.plot(x0.flatten(), marker = 'o')
plt.show()
